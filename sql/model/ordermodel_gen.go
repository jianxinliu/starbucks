// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderFieldNames          = builder.RawFieldNames(&Order{})
	orderRows                = strings.Join(orderFieldNames, ",")
	orderRowsExpectAutoSet   = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderRowsWithPlaceHolder = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStarbucksOrderIdPrefix      = "cache:starbucks:order:id:"
	cacheStarbucksOrderOrderIdPrefix = "cache:starbucks:order:orderId:"
)

type (
	orderModel interface {
		Insert(ctx context.Context, data *Order) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Order, error)
		FindOneByOrderId(ctx context.Context, orderId string) (*Order, error)
		Update(ctx context.Context, data *Order) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderModel struct {
		sqlc.CachedConn
		table string
	}

	Order struct {
		Id         int64        `db:"id"`
		CreatedAt  sql.NullTime `db:"created_at"`
		UpdatedAt  sql.NullTime `db:"updated_at"`
		DeletedAt  sql.NullTime `db:"deleted_at"`
		OrderId    string       `db:"order_id"`
		ProductId  string       `db:"product_id"`  // 哪个产品的订单
		Status     int64        `db:"status"`      // 订单状态。0,1,2,……
		CreateTime time.Time    `db:"create_time"` // 订单创建时间
		FinishTime sql.NullTime `db:"finish_time"` // 订单结束时间
	}
)

func newOrderModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderModel {
	return &defaultOrderModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order`",
	}
}

func (m *defaultOrderModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	starbucksOrderIdKey := fmt.Sprintf("%s%v", cacheStarbucksOrderIdPrefix, id)
	starbucksOrderOrderIdKey := fmt.Sprintf("%s%v", cacheStarbucksOrderOrderIdPrefix, data.OrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, starbucksOrderIdKey, starbucksOrderOrderIdKey)
	return err
}

func (m *defaultOrderModel) FindOne(ctx context.Context, id int64) (*Order, error) {
	starbucksOrderIdKey := fmt.Sprintf("%s%v", cacheStarbucksOrderIdPrefix, id)
	var resp Order
	err := m.QueryRowCtx(ctx, &resp, starbucksOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) FindOneByOrderId(ctx context.Context, orderId string) (*Order, error) {
	starbucksOrderOrderIdKey := fmt.Sprintf("%s%v", cacheStarbucksOrderOrderIdPrefix, orderId)
	var resp Order
	err := m.QueryRowIndexCtx(ctx, &resp, starbucksOrderOrderIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", orderRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) Insert(ctx context.Context, data *Order) (sql.Result, error) {
	starbucksOrderIdKey := fmt.Sprintf("%s%v", cacheStarbucksOrderIdPrefix, data.Id)
	starbucksOrderOrderIdKey := fmt.Sprintf("%s%v", cacheStarbucksOrderOrderIdPrefix, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, orderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.OrderId, data.ProductId, data.Status, data.FinishTime)
	}, starbucksOrderIdKey, starbucksOrderOrderIdKey)
	return ret, err
}

func (m *defaultOrderModel) Update(ctx context.Context, newData *Order) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	starbucksOrderIdKey := fmt.Sprintf("%s%v", cacheStarbucksOrderIdPrefix, data.Id)
	starbucksOrderOrderIdKey := fmt.Sprintf("%s%v", cacheStarbucksOrderOrderIdPrefix, data.OrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DeletedAt, newData.OrderId, newData.ProductId, newData.Status, newData.FinishTime, newData.Id)
	}, starbucksOrderIdKey, starbucksOrderOrderIdKey)
	return err
}

func (m *defaultOrderModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStarbucksOrderIdPrefix, primary)
}

func (m *defaultOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderModel) tableName() string {
	return m.table
}

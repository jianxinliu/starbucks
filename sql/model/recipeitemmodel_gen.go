// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	recipeItemFieldNames          = builder.RawFieldNames(&RecipeItem{})
	recipeItemRows                = strings.Join(recipeItemFieldNames, ",")
	recipeItemRowsExpectAutoSet   = strings.Join(stringx.Remove(recipeItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	recipeItemRowsWithPlaceHolder = strings.Join(stringx.Remove(recipeItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStarbucksRecipeItemIdPrefix                 = "cache:starbucks:recipeItem:id:"
	cacheStarbucksRecipeItemRecipeIdMaterialIdPrefix = "cache:starbucks:recipeItem:recipeId:materialId:"
)

type (
	recipeItemModel interface {
		Insert(ctx context.Context, data *RecipeItem) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RecipeItem, error)
		FindOneByRecipeIdMaterialId(ctx context.Context, recipeId string, materialId string) (*RecipeItem, error)
		Update(ctx context.Context, data *RecipeItem) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRecipeItemModel struct {
		sqlc.CachedConn
		table string
	}

	RecipeItem struct {
		Id         int64   `db:"id"`
		RecipeId   string  `db:"recipe_id"`
		MaterialId string  `db:"material_id"` // 使用那种原料
		Quantity   float64 `db:"quantity"`    // 原料数量
	}
)

func newRecipeItemModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRecipeItemModel {
	return &defaultRecipeItemModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`recipe_item`",
	}
}

func (m *defaultRecipeItemModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	starbucksRecipeItemIdKey := fmt.Sprintf("%s%v", cacheStarbucksRecipeItemIdPrefix, id)
	starbucksRecipeItemRecipeIdMaterialIdKey := fmt.Sprintf("%s%v:%v", cacheStarbucksRecipeItemRecipeIdMaterialIdPrefix, data.RecipeId, data.MaterialId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, starbucksRecipeItemIdKey, starbucksRecipeItemRecipeIdMaterialIdKey)
	return err
}

func (m *defaultRecipeItemModel) FindOne(ctx context.Context, id int64) (*RecipeItem, error) {
	starbucksRecipeItemIdKey := fmt.Sprintf("%s%v", cacheStarbucksRecipeItemIdPrefix, id)
	var resp RecipeItem
	err := m.QueryRowCtx(ctx, &resp, starbucksRecipeItemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", recipeItemRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecipeItemModel) FindOneByRecipeIdMaterialId(ctx context.Context, recipeId string, materialId string) (*RecipeItem, error) {
	starbucksRecipeItemRecipeIdMaterialIdKey := fmt.Sprintf("%s%v:%v", cacheStarbucksRecipeItemRecipeIdMaterialIdPrefix, recipeId, materialId)
	var resp RecipeItem
	err := m.QueryRowIndexCtx(ctx, &resp, starbucksRecipeItemRecipeIdMaterialIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `recipe_id` = ? and `material_id` = ? limit 1", recipeItemRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, recipeId, materialId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecipeItemModel) Insert(ctx context.Context, data *RecipeItem) (sql.Result, error) {
	starbucksRecipeItemIdKey := fmt.Sprintf("%s%v", cacheStarbucksRecipeItemIdPrefix, data.Id)
	starbucksRecipeItemRecipeIdMaterialIdKey := fmt.Sprintf("%s%v:%v", cacheStarbucksRecipeItemRecipeIdMaterialIdPrefix, data.RecipeId, data.MaterialId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, recipeItemRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RecipeId, data.MaterialId, data.Quantity)
	}, starbucksRecipeItemIdKey, starbucksRecipeItemRecipeIdMaterialIdKey)
	return ret, err
}

func (m *defaultRecipeItemModel) Update(ctx context.Context, newData *RecipeItem) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	starbucksRecipeItemIdKey := fmt.Sprintf("%s%v", cacheStarbucksRecipeItemIdPrefix, data.Id)
	starbucksRecipeItemRecipeIdMaterialIdKey := fmt.Sprintf("%s%v:%v", cacheStarbucksRecipeItemRecipeIdMaterialIdPrefix, data.RecipeId, data.MaterialId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, recipeItemRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.RecipeId, newData.MaterialId, newData.Quantity, newData.Id)
	}, starbucksRecipeItemIdKey, starbucksRecipeItemRecipeIdMaterialIdKey)
	return err
}

func (m *defaultRecipeItemModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStarbucksRecipeItemIdPrefix, primary)
}

func (m *defaultRecipeItemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", recipeItemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRecipeItemModel) tableName() string {
	return m.table
}

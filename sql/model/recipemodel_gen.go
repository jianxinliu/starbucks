// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	recipeFieldNames          = builder.RawFieldNames(&Recipe{})
	recipeRows                = strings.Join(recipeFieldNames, ",")
	recipeRowsExpectAutoSet   = strings.Join(stringx.Remove(recipeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	recipeRowsWithPlaceHolder = strings.Join(stringx.Remove(recipeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStarbucksRecipeIdPrefix              = "cache:starbucks:recipe:id:"
	cacheStarbucksRecipeRecipeIdVersionPrefix = "cache:starbucks:recipe:recipeId:version:"
)

type (
	recipeModel interface {
		Insert(ctx context.Context, data *Recipe) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Recipe, error)
		FindOneByRecipeIdVersion(ctx context.Context, recipeId string, version int64) (*Recipe, error)
		Update(ctx context.Context, data *Recipe) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRecipeModel struct {
		sqlc.CachedConn
		table string
	}

	Recipe struct {
		Id          int64          `db:"id"`
		RecipeId    string         `db:"recipe_id"`
		RecipeName  string         `db:"recipe_name"` // 配方名称
		Description sql.NullString `db:"description"` // 配方说明
		Version     int64          `db:"version"`     // 配方版本，变更时升级版本
	}
)

func newRecipeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRecipeModel {
	return &defaultRecipeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`recipe`",
	}
}

func (m *defaultRecipeModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	starbucksRecipeIdKey := fmt.Sprintf("%s%v", cacheStarbucksRecipeIdPrefix, id)
	starbucksRecipeRecipeIdVersionKey := fmt.Sprintf("%s%v:%v", cacheStarbucksRecipeRecipeIdVersionPrefix, data.RecipeId, data.Version)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, starbucksRecipeIdKey, starbucksRecipeRecipeIdVersionKey)
	return err
}

func (m *defaultRecipeModel) FindOne(ctx context.Context, id int64) (*Recipe, error) {
	starbucksRecipeIdKey := fmt.Sprintf("%s%v", cacheStarbucksRecipeIdPrefix, id)
	var resp Recipe
	err := m.QueryRowCtx(ctx, &resp, starbucksRecipeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", recipeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecipeModel) FindOneByRecipeIdVersion(ctx context.Context, recipeId string, version int64) (*Recipe, error) {
	starbucksRecipeRecipeIdVersionKey := fmt.Sprintf("%s%v:%v", cacheStarbucksRecipeRecipeIdVersionPrefix, recipeId, version)
	var resp Recipe
	err := m.QueryRowIndexCtx(ctx, &resp, starbucksRecipeRecipeIdVersionKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `recipe_id` = ? and `version` = ? limit 1", recipeRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, recipeId, version); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecipeModel) Insert(ctx context.Context, data *Recipe) (sql.Result, error) {
	starbucksRecipeIdKey := fmt.Sprintf("%s%v", cacheStarbucksRecipeIdPrefix, data.Id)
	starbucksRecipeRecipeIdVersionKey := fmt.Sprintf("%s%v:%v", cacheStarbucksRecipeRecipeIdVersionPrefix, data.RecipeId, data.Version)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, recipeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RecipeId, data.RecipeName, data.Description, data.Version)
	}, starbucksRecipeIdKey, starbucksRecipeRecipeIdVersionKey)
	return ret, err
}

func (m *defaultRecipeModel) Update(ctx context.Context, newData *Recipe) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	starbucksRecipeIdKey := fmt.Sprintf("%s%v", cacheStarbucksRecipeIdPrefix, data.Id)
	starbucksRecipeRecipeIdVersionKey := fmt.Sprintf("%s%v:%v", cacheStarbucksRecipeRecipeIdVersionPrefix, data.RecipeId, data.Version)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, recipeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.RecipeId, newData.RecipeName, newData.Description, newData.Version, newData.Id)
	}, starbucksRecipeIdKey, starbucksRecipeRecipeIdVersionKey)
	return err
}

func (m *defaultRecipeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStarbucksRecipeIdPrefix, primary)
}

func (m *defaultRecipeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", recipeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRecipeModel) tableName() string {
	return m.table
}

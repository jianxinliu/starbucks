// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productGroupFieldNames          = builder.RawFieldNames(&ProductGroup{})
	productGroupRows                = strings.Join(productGroupFieldNames, ",")
	productGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(productGroupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productGroupRowsWithPlaceHolder = strings.Join(stringx.Remove(productGroupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStarbucksProductGroupIdPrefix      = "cache:starbucks:productGroup:id:"
	cacheStarbucksProductGroupGroupIdPrefix = "cache:starbucks:productGroup:groupId:"
)

type (
	productGroupModel interface {
		Insert(ctx context.Context, data *ProductGroup) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductGroup, error)
		FindOneByGroupId(ctx context.Context, groupId string) (*ProductGroup, error)
		Update(ctx context.Context, data *ProductGroup) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductGroupModel struct {
		sqlc.CachedConn
		table string
	}

	ProductGroup struct {
		Id        int64          `db:"id"`
		GroupId   string         `db:"group_id"`
		GroupName sql.NullString `db:"group_name"` // 分类名称: 咖啡，果汁……
		GroupDesc sql.NullString `db:"group_desc"`
	}
)

func newProductGroupModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductGroupModel {
	return &defaultProductGroupModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product_group`",
	}
}

func (m *defaultProductGroupModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	starbucksProductGroupGroupIdKey := fmt.Sprintf("%s%v", cacheStarbucksProductGroupGroupIdPrefix, data.GroupId)
	starbucksProductGroupIdKey := fmt.Sprintf("%s%v", cacheStarbucksProductGroupIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, starbucksProductGroupGroupIdKey, starbucksProductGroupIdKey)
	return err
}

func (m *defaultProductGroupModel) FindOne(ctx context.Context, id int64) (*ProductGroup, error) {
	starbucksProductGroupIdKey := fmt.Sprintf("%s%v", cacheStarbucksProductGroupIdPrefix, id)
	var resp ProductGroup
	err := m.QueryRowCtx(ctx, &resp, starbucksProductGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productGroupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductGroupModel) FindOneByGroupId(ctx context.Context, groupId string) (*ProductGroup, error) {
	starbucksProductGroupGroupIdKey := fmt.Sprintf("%s%v", cacheStarbucksProductGroupGroupIdPrefix, groupId)
	var resp ProductGroup
	err := m.QueryRowIndexCtx(ctx, &resp, starbucksProductGroupGroupIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", productGroupRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, groupId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductGroupModel) Insert(ctx context.Context, data *ProductGroup) (sql.Result, error) {
	starbucksProductGroupGroupIdKey := fmt.Sprintf("%s%v", cacheStarbucksProductGroupGroupIdPrefix, data.GroupId)
	starbucksProductGroupIdKey := fmt.Sprintf("%s%v", cacheStarbucksProductGroupIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, productGroupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupId, data.GroupName, data.GroupDesc)
	}, starbucksProductGroupGroupIdKey, starbucksProductGroupIdKey)
	return ret, err
}

func (m *defaultProductGroupModel) Update(ctx context.Context, newData *ProductGroup) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	starbucksProductGroupGroupIdKey := fmt.Sprintf("%s%v", cacheStarbucksProductGroupGroupIdPrefix, data.GroupId)
	starbucksProductGroupIdKey := fmt.Sprintf("%s%v", cacheStarbucksProductGroupIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productGroupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.GroupId, newData.GroupName, newData.GroupDesc, newData.Id)
	}, starbucksProductGroupGroupIdKey, starbucksProductGroupIdKey)
	return err
}

func (m *defaultProductGroupModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStarbucksProductGroupIdPrefix, primary)
}

func (m *defaultProductGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productGroupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductGroupModel) tableName() string {
	return m.table
}

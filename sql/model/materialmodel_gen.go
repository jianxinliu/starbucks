// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	materialFieldNames          = builder.RawFieldNames(&Material{})
	materialRows                = strings.Join(materialFieldNames, ",")
	materialRowsExpectAutoSet   = strings.Join(stringx.Remove(materialFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	materialRowsWithPlaceHolder = strings.Join(stringx.Remove(materialFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStarbucksMaterialIdPrefix         = "cache:starbucks:material:id:"
	cacheStarbucksMaterialMaterialIdPrefix = "cache:starbucks:material:materialId:"
)

type (
	materialModel interface {
		Insert(ctx context.Context, data *Material) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Material, error)
		FindOneByMaterialId(ctx context.Context, materialId string) (*Material, error)
		Update(ctx context.Context, data *Material) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMaterialModel struct {
		sqlc.CachedConn
		table string
	}

	Material struct {
		Id         int64  `db:"id"`
		MaterialId string `db:"material_id"` // 原料 id
		MetaId     string `db:"meta_id"`     // 原料类型 ID
	}
)

func newMaterialModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMaterialModel {
	return &defaultMaterialModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`material`",
	}
}

func (m *defaultMaterialModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	starbucksMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialIdPrefix, id)
	starbucksMaterialMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMaterialIdPrefix, data.MaterialId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, starbucksMaterialIdKey, starbucksMaterialMaterialIdKey)
	return err
}

func (m *defaultMaterialModel) FindOne(ctx context.Context, id int64) (*Material, error) {
	starbucksMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialIdPrefix, id)
	var resp Material
	err := m.QueryRowCtx(ctx, &resp, starbucksMaterialIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", materialRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMaterialModel) FindOneByMaterialId(ctx context.Context, materialId string) (*Material, error) {
	starbucksMaterialMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMaterialIdPrefix, materialId)
	var resp Material
	err := m.QueryRowIndexCtx(ctx, &resp, starbucksMaterialMaterialIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `material_id` = ? limit 1", materialRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, materialId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMaterialModel) Insert(ctx context.Context, data *Material) (sql.Result, error) {
	starbucksMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialIdPrefix, data.Id)
	starbucksMaterialMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMaterialIdPrefix, data.MaterialId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, materialRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MaterialId, data.MetaId)
	}, starbucksMaterialIdKey, starbucksMaterialMaterialIdKey)
	return ret, err
}

func (m *defaultMaterialModel) Update(ctx context.Context, newData *Material) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	starbucksMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialIdPrefix, data.Id)
	starbucksMaterialMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMaterialIdPrefix, data.MaterialId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, materialRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.MaterialId, newData.MetaId, newData.Id)
	}, starbucksMaterialIdKey, starbucksMaterialMaterialIdKey)
	return err
}

func (m *defaultMaterialModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStarbucksMaterialIdPrefix, primary)
}

func (m *defaultMaterialModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", materialRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMaterialModel) tableName() string {
	return m.table
}

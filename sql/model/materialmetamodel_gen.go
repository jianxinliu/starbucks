// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	materialMetaFieldNames          = builder.RawFieldNames(&MaterialMeta{})
	materialMetaRows                = strings.Join(materialMetaFieldNames, ",")
	materialMetaRowsExpectAutoSet   = strings.Join(stringx.Remove(materialMetaFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	materialMetaRowsWithPlaceHolder = strings.Join(stringx.Remove(materialMetaFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStarbucksMaterialMetaIdPrefix         = "cache:starbucks:materialMeta:id:"
	cacheStarbucksMaterialMetaMaterialIdPrefix = "cache:starbucks:materialMeta:materialId:"
)

type (
	materialMetaModel interface {
		Insert(ctx context.Context, data *MaterialMeta) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MaterialMeta, error)
		FindOneByMaterialId(ctx context.Context, materialId string) (*MaterialMeta, error)
		Update(ctx context.Context, data *MaterialMeta) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMaterialMetaModel struct {
		sqlc.CachedConn
		table string
	}

	MaterialMeta struct {
		Id           int64          `db:"id"`
		MaterialId   string         `db:"material_id"`   // 原料 ID
		MaterialType string         `db:"material_type"` // 原料类型。豆子，糖，奶，巧克力……
		Name         sql.NullString `db:"name"`
		Unit         string         `db:"unit"` // 单位
	}
)

func newMaterialMetaModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMaterialMetaModel {
	return &defaultMaterialMetaModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`material_meta`",
	}
}

func (m *defaultMaterialMetaModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	starbucksMaterialMetaIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMetaIdPrefix, id)
	starbucksMaterialMetaMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMetaMaterialIdPrefix, data.MaterialId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, starbucksMaterialMetaIdKey, starbucksMaterialMetaMaterialIdKey)
	return err
}

func (m *defaultMaterialMetaModel) FindOne(ctx context.Context, id int64) (*MaterialMeta, error) {
	starbucksMaterialMetaIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMetaIdPrefix, id)
	var resp MaterialMeta
	err := m.QueryRowCtx(ctx, &resp, starbucksMaterialMetaIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", materialMetaRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMaterialMetaModel) FindOneByMaterialId(ctx context.Context, materialId string) (*MaterialMeta, error) {
	starbucksMaterialMetaMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMetaMaterialIdPrefix, materialId)
	var resp MaterialMeta
	err := m.QueryRowIndexCtx(ctx, &resp, starbucksMaterialMetaMaterialIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `material_id` = ? limit 1", materialMetaRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, materialId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMaterialMetaModel) Insert(ctx context.Context, data *MaterialMeta) (sql.Result, error) {
	starbucksMaterialMetaIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMetaIdPrefix, data.Id)
	starbucksMaterialMetaMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMetaMaterialIdPrefix, data.MaterialId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, materialMetaRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MaterialId, data.MaterialType, data.Name, data.Unit)
	}, starbucksMaterialMetaIdKey, starbucksMaterialMetaMaterialIdKey)
	return ret, err
}

func (m *defaultMaterialMetaModel) Update(ctx context.Context, newData *MaterialMeta) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	starbucksMaterialMetaIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMetaIdPrefix, data.Id)
	starbucksMaterialMetaMaterialIdKey := fmt.Sprintf("%s%v", cacheStarbucksMaterialMetaMaterialIdPrefix, data.MaterialId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, materialMetaRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.MaterialId, newData.MaterialType, newData.Name, newData.Unit, newData.Id)
	}, starbucksMaterialMetaIdKey, starbucksMaterialMetaMaterialIdKey)
	return err
}

func (m *defaultMaterialMetaModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStarbucksMaterialMetaIdPrefix, primary)
}

func (m *defaultMaterialMetaModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", materialMetaRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMaterialMetaModel) tableName() string {
	return m.table
}
